// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    partial class DirectoryServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.Property<Guid>("DepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationsId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("DepartmentLocation");
                });

            modelBuilder.Entity("DepartmentPosition", b =>
                {
                    b.Property<Guid>("DepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionsId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentsId", "PositionsId");

                    b.HasIndex("PositionsId");

                    b.ToTable("DepartmentPosition");
                });

            modelBuilder.Entity("DirectoryService.Core.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Identifier", "DirectoryService.Core.Departments.Department.Identifier#Identifier", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Core.Departments.Department.Name#DepartmentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Path", "DirectoryService.Core.Departments.Department.Path#Path", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Core.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "DirectoryService.Core.Locations.Location.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("city");

                            b1.Property<int>("HouseNumber")
                                .HasMaxLength(16)
                                .HasColumnType("integer")
                                .HasColumnName("houseNumber");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("region");

                            b1.Property<int>("Room")
                                .HasMaxLength(16)
                                .HasColumnType("integer")
                                .HasColumnName("room");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("street");

                            b1.Property<int>("ZipCode")
                                .HasMaxLength(16)
                                .HasColumnType("integer")
                                .HasColumnName("zipCode");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Core.Locations.Location.Name#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Timezone", "DirectoryService.Core.Locations.Location.Timezone#Timezone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Iana")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("iana");
                        });

                    b.HasKey("Id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Core.Positions.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Core.Positions.Position.Name#PositionName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Core.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Core.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Core.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Core.Positions.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
